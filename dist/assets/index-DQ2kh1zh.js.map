{"version":3,"file":"index-DQ2kh1zh.js","sources":["../../src/game/utils/Vector2.ts","../../src/game/entities/Projectile.ts","../../src/game/entities/PowerUp.ts","../../src/game/entities/Player.ts","../../src/game/entities/Enemy.ts","../../src/game/entities/Boss.ts","../../src/game/effects/ParticleSystem.ts","../../src/game/managers/InputManager.ts","../../src/game/managers/UIManager.ts","../../src/game/managers/StorageManager.ts","../../src/game/managers/SoundManager.ts","../../src/game/types/GameTypes.ts","../../src/game/Game.ts","../../src/main.ts"],"sourcesContent":["export class Vector2 {\n  public x: number;\n  public y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public add(other: Vector2): Vector2 {\n    return new Vector2(this.x + other.x, this.y + other.y);\n  }\n\n  public subtract(other: Vector2): Vector2 {\n    return new Vector2(this.x - other.x, this.y - other.y);\n  }\n\n  public multiply(scalar: number): Vector2 {\n    return new Vector2(this.x * scalar, this.y * scalar);\n  }\n\n  public magnitude(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  public normalize(): Vector2 {\n    const mag = this.magnitude();\n    if (mag === 0) return new Vector2(0, 0);\n    return new Vector2(this.x / mag, this.y / mag);\n  }\n\n  public distance(other: Vector2): number {\n    const dx = this.x - other.x;\n    const dy = this.y - other.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  public clone(): Vector2 {\n    return new Vector2(this.x, this.y);\n  }\n}\n","import { Vector2 } from '../utils/Vector2';\n\nexport class Projectile {\n  public position: Vector2;\n  public velocity: Vector2;\n  public width: number = 4;\n  public height: number = 12;\n  public damage: number;\n  public isPlayerProjectile: boolean;\n  public color: string;\n\n  constructor(\n    x: number,\n    y: number,\n    vx: number,\n    vy: number,\n    damage: number,\n    isPlayerProjectile: boolean,\n    color: string,\n    width: number = 4,\n    height: number = 12\n  ) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(vx, vy);\n    this.damage = damage;\n    this.isPlayerProjectile = isPlayerProjectile;\n    this.color = color;\n    this.width = width;\n    this.height = height;\n  }\n\n  public update(deltaTime: number): void {\n    this.position.x += this.velocity.x * deltaTime / 1000;\n    this.position.y += this.velocity.y * deltaTime / 1000;\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    \n    // Add glow effect\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 5;\n    \n    ctx.fillStyle = this.color;\n    \n    if (this.isPlayerProjectile) {\n      // Player projectiles are more stylized\n      ctx.beginPath();\n      ctx.ellipse(\n        this.position.x + this.width / 2,\n        this.position.y + this.height / 2,\n        this.width / 2,\n        this.height / 2,\n        0, 0, Math.PI * 2\n      );\n      ctx.fill();\n    } else {\n      // Enemy projectiles vary by size\n      if (this.width > 6) {\n        // Large projectiles (boss/bomber)\n        ctx.beginPath();\n        ctx.ellipse(\n          this.position.x + this.width / 2,\n          this.position.y + this.height / 2,\n          this.width / 2,\n          this.height / 2,\n          0, 0, Math.PI * 2\n        );\n        ctx.fill();\n      } else {\n        // Regular enemy projectiles\n        ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n      }\n    }\n    \n    ctx.restore();\n  }\n}\n","import { Vector2 } from '../utils/Vector2';\n\nexport enum PowerUpType {\n  HEALTH = 'health',\n  SHIELD = 'shield',\n  WEAPON = 'weapon',\n  SPEED = 'speed'\n}\n\nexport class PowerUp {\n  public position: Vector2;\n  public velocity: Vector2;\n  public width = 30;\n  public height = 30;\n  public type: PowerUpType;\n  public color: string;\n  \n  private lifeTime = 15000; // 15 seconds\n  private age = 0;\n  private pulseTimer = 0;\n\n  constructor(x: number, y: number) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(0, 50); // Slow downward movement\n    \n    // Randomly select power-up type\n    const types = Object.values(PowerUpType);\n    this.type = types[Math.floor(Math.random() * types.length)];\n    \n    this.color = this.getColor();\n  }\n\n  private getColor(): string {\n    switch (this.type) {\n      case PowerUpType.HEALTH: return '#00ff00';\n      case PowerUpType.SHIELD: return '#0088ff';\n      case PowerUpType.WEAPON: return '#ff4400';\n      case PowerUpType.SPEED: return '#ffff00';\n      default: return '#ffffff';\n    }\n  }\n\n  public update(deltaTime: number): void {\n    this.age += deltaTime;\n    this.pulseTimer += deltaTime;\n    \n    this.position.x += this.velocity.x * deltaTime / 1000;\n    this.position.y += this.velocity.y * deltaTime / 1000;\n  }\n\n  public isExpired(): boolean {\n    return this.age >= this.lifeTime;\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    \n    // Pulsing effect\n    const pulse = Math.sin(this.pulseTimer * 0.005) * 0.3 + 0.7;\n    const alpha = this.age > this.lifeTime - 3000 ? \n      Math.sin(this.age * 0.01) * 0.5 + 0.5 : 1; // Blink when expiring\n    \n    ctx.globalAlpha = alpha;\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 10 * pulse;\n    \n    // Draw power-up icon\n    ctx.fillStyle = this.color;\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 2;\n    \n    const centerX = this.position.x + this.width / 2;\n    const centerY = this.position.y + this.height / 2;\n    const size = this.width / 2 * pulse;\n    \n    switch (this.type) {\n      case PowerUpType.HEALTH:\n        // Cross shape\n        ctx.fillRect(centerX - size * 0.6, centerY - size * 0.2, size * 1.2, size * 0.4);\n        ctx.fillRect(centerX - size * 0.2, centerY - size * 0.6, size * 0.4, size * 1.2);\n        break;\n        \n      case PowerUpType.SHIELD:\n        // Shield shape\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n        break;\n        \n      case PowerUpType.WEAPON:\n        // Arrow/bullet shape\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY - size);\n        ctx.lineTo(centerX - size * 0.5, centerY + size);\n        ctx.lineTo(centerX + size * 0.5, centerY + size);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        break;\n        \n      case PowerUpType.SPEED:\n        // Lightning bolt\n        ctx.beginPath();\n        ctx.moveTo(centerX - size * 0.3, centerY - size);\n        ctx.lineTo(centerX + size * 0.3, centerY - size * 0.2);\n        ctx.lineTo(centerX - size * 0.1, centerY - size * 0.2);\n        ctx.lineTo(centerX + size * 0.3, centerY + size);\n        ctx.lineTo(centerX - size * 0.3, centerY + size * 0.2);\n        ctx.lineTo(centerX + size * 0.1, centerY + size * 0.2);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        break;\n    }\n    \n    ctx.restore();\n  }\n}\n","import { Vector2 } from '../utils/Vector2';\nimport { Projectile } from './Projectile';\nimport { PowerUp, PowerUpType } from './PowerUp';\nimport { InputManager } from '../managers/InputManager';\nimport { UpgradeType, PlayerUpgrades } from '../types/GameTypes';\n\nexport class Player {\n  public position: Vector2;\n  public velocity: Vector2;\n  public width = 40;\n  public height = 40;\n  \n  // Stats\n  public hp: number = 100;\n  public maxHp: number = 100;\n  public shield: number = 100;\n  public maxShield: number = 100;\n  public speed: number = 300;\n  public damage: number = 25;\n  public fireRate: number = 300;\n  public ramDamage = 50;\n\n  // Upgrades\n  private upgrades: PlayerUpgrades = {\n    weapon: 1,\n    shield: 1,\n    hp: 1,\n    speed: 1\n  };\n\n  // Shooting\n  private lastShot = 0;\n  private shootCooldown: number = 300;\n\n  // Shield regeneration\n  private lastDamageTime = 0;\n  private shieldRegenDelay = 3000; // 3 seconds\n  private shieldRegenRate = 20; // per second\n\n  // Power-up effects\n  private powerUpEffects: Map<PowerUpType, number> = new Map();\n\n  constructor(x: number, y: number) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(0, 0);\n    \n    this.initializeStats();\n  }\n\n  private initializeStats(): void {\n    this.maxHp = 100 + (this.upgrades.hp - 1) * 25;\n    this.hp = this.maxHp;\n    this.maxShield = 100 + (this.upgrades.shield - 1) * 30;\n    this.shield = this.maxShield;\n    this.speed = 300 + (this.upgrades.speed - 1) * 50;\n    this.damage = 25 + (this.upgrades.weapon - 1) * 10;\n    this.fireRate = 300 - (this.upgrades.weapon - 1) * 30; // Lower is faster\n    this.shootCooldown = this.fireRate;\n  }\n\n  public update(deltaTime: number, input: InputManager, canvas: HTMLCanvasElement): void {\n    // Handle movement\n    this.velocity.x = 0;\n    this.velocity.y = 0;\n\n    if (input.isMovingLeft()) this.velocity.x -= 1;\n    if (input.isMovingRight()) this.velocity.x += 1;\n    if (input.isMovingUp()) this.velocity.y -= 1;\n    if (input.isMovingDown()) this.velocity.y += 1;\n\n    // Handle touch input\n    const touchInput = input.getTouchInput();\n    if (touchInput) {\n      const targetX = touchInput.x - this.width / 2;\n      const targetY = touchInput.y - this.height / 2;\n      \n      const dx = targetX - this.position.x;\n      const dy = targetY - this.position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      if (distance > 5) {\n        this.velocity.x = dx / distance;\n        this.velocity.y = dy / distance;\n      }\n    }\n\n    // Normalize diagonal movement\n    if (this.velocity.x !== 0 && this.velocity.y !== 0) {\n      this.velocity.x *= 0.707;\n      this.velocity.y *= 0.707;\n    }\n\n    // Apply speed\n    const currentSpeed = this.getCurrentSpeed();\n    this.position.x += this.velocity.x * currentSpeed * deltaTime / 1000;\n    this.position.y += this.velocity.y * currentSpeed * deltaTime / 1000;\n\n    // Keep player in bounds\n    this.position.x = Math.max(0, Math.min(canvas.width - this.width, this.position.x));\n    this.position.y = Math.max(0, Math.min(canvas.height - this.height, this.position.y));\n\n    // Update shooting cooldown\n    this.lastShot += deltaTime;\n\n    // Shield regeneration\n    if (Date.now() - this.lastDamageTime > this.shieldRegenDelay && this.shield < this.maxShield) {\n      this.shield = Math.min(this.maxShield, this.shield + this.shieldRegenRate * deltaTime / 1000);\n    }\n\n    // Update power-up effects\n    this.updatePowerUpEffects(deltaTime);\n  }\n\n  private getCurrentSpeed(): number {\n    let speed = this.speed;\n    if (this.powerUpEffects.has(PowerUpType.SPEED)) {\n      speed *= 1.5;\n    }\n    return speed;\n  }\n\n  private updatePowerUpEffects(deltaTime: number): void {\n    for (const [type, timeLeft] of this.powerUpEffects.entries()) {\n      const newTime = timeLeft - deltaTime;\n      if (newTime <= 0) {\n        this.powerUpEffects.delete(type);\n      } else {\n        this.powerUpEffects.set(type, newTime);\n      }\n    }\n  }\n\n  public shoot(): Projectile | null {\n    if (this.lastShot >= this.shootCooldown) {\n      this.lastShot = 0;\n      \n      const damage = this.getCurrentDamage();\n      const projectile = new Projectile(\n        this.position.x + this.width / 2 - 2,\n        this.position.y,\n        0, -800, // velocity\n        damage,\n        true, // isPlayerProjectile\n        '#00ffff'\n      );\n      \n      return projectile;\n    }\n    return null;\n  }\n\n  private getCurrentDamage(): number {\n    let damage = this.damage;\n    if (this.powerUpEffects.has(PowerUpType.WEAPON)) {\n      damage *= 2;\n    }\n    return damage;\n  }\n\n  public takeDamage(amount: number): void {\n    this.lastDamageTime = Date.now();\n    \n    if (this.shield > 0) {\n      const shieldDamage = Math.min(this.shield, amount);\n      this.shield -= shieldDamage;\n      amount -= shieldDamage;\n    }\n    \n    if (amount > 0) {\n      this.hp = Math.max(0, this.hp - amount);\n    }\n  }\n\n  public applyPowerUp(powerUp: PowerUp): void {\n    switch (powerUp.type) {\n      case PowerUpType.HEALTH:\n        this.hp = Math.min(this.maxHp, this.hp + 30);\n        break;\n      case PowerUpType.SHIELD:\n        this.shield = Math.min(this.maxShield, this.shield + 50);\n        break;\n      case PowerUpType.WEAPON:\n        this.powerUpEffects.set(PowerUpType.WEAPON, 10000); // 10 seconds\n        break;\n      case PowerUpType.SPEED:\n        this.powerUpEffects.set(PowerUpType.SPEED, 8000); // 8 seconds\n        break;\n    }\n  }\n\n  public upgrade(type: UpgradeType): void {\n    this.upgrades[type]++;\n    this.initializeStats();\n  }\n\n  public getUpgradeCost(type: UpgradeType): number {\n    const baseCosts = {\n      weapon: 100,\n      shield: 150,\n      hp: 200,\n      speed: 120\n    };\n    \n    return Math.floor(baseCosts[type] * Math.pow(1.5, this.upgrades[type] - 1));\n  }\n\n  public getUpgrades(): PlayerUpgrades {\n    return { ...this.upgrades };\n  }\n\n  public applyUpgrades(upgrades: PlayerUpgrades): void {\n    this.upgrades = { ...upgrades };\n    this.initializeStats();\n  }\n\n  public reset(x: number, y: number): void {\n    this.position.x = x;\n    this.position.y = y;\n    this.velocity.x = 0;\n    this.velocity.y = 0;\n    this.hp = this.maxHp;\n    this.shield = this.maxShield;\n    this.lastShot = 0;\n    this.lastDamageTime = 0;\n    this.powerUpEffects.clear();\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    \n    // Draw shield effect\n    if (this.shield > 0) {\n      ctx.strokeStyle = `rgba(68, 68, 255, ${this.shield / this.maxShield * 0.5})`;\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.arc(\n        this.position.x + this.width / 2,\n        this.position.y + this.height / 2,\n        this.width / 2 + 5,\n        0,\n        Math.PI * 2\n      );\n      ctx.stroke();\n    }\n\n    // Draw power-up effects\n    if (this.powerUpEffects.has(PowerUpType.WEAPON)) {\n      ctx.shadowColor = '#ff0000';\n      ctx.shadowBlur = 10;\n    }\n    if (this.powerUpEffects.has(PowerUpType.SPEED)) {\n      ctx.strokeStyle = '#ffff00';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(this.position.x - 2, this.position.y - 2, this.width + 4, this.height + 4);\n    }\n\n    // Draw player ship\n    ctx.fillStyle = '#00ffff';\n    ctx.beginPath();\n    ctx.moveTo(this.position.x + this.width / 2, this.position.y);\n    ctx.lineTo(this.position.x, this.position.y + this.height);\n    ctx.lineTo(this.position.x + this.width / 4, this.position.y + this.height * 0.8);\n    ctx.lineTo(this.position.x + this.width * 0.75, this.position.y + this.height * 0.8);\n    ctx.lineTo(this.position.x + this.width, this.position.y + this.height);\n    ctx.closePath();\n    ctx.fill();\n\n    // Draw engine glow\n    ctx.fillStyle = '#ff4444';\n    ctx.beginPath();\n    ctx.ellipse(\n      this.position.x + this.width / 2,\n      this.position.y + this.height + 5,\n      8, 12, 0, 0, Math.PI * 2\n    );\n    ctx.fill();\n\n    ctx.restore();\n  }\n}\n","import { Vector2 } from '../utils/Vector2';\nimport { Projectile } from './Projectile';\n\nexport enum EnemyType {\n  SCOUT = 'scout',\n  FIGHTER = 'fighter',\n  HEAVY = 'heavy',\n  BOMBER = 'bomber',\n  INTERCEPTOR = 'interceptor',\n  DESTROYER = 'destroyer'\n}\n\nexport class Enemy {\n  public position: Vector2;\n  public velocity: Vector2;\n  public width: number = 30;\n  public height: number = 30;\n  public hp: number = 25;\n  public maxHp: number = 25;\n  public damage: number = 15;\n  public scoreValue: number = 50;\n  public coinValue: number = 5;\n  public type: EnemyType;\n\n  private speed: number = 150;\n  private lastShot = 0;\n  private shootCooldown: number = 2000;\n  private movementPattern: number;\n  private patternTimer = 0;\n  private specialTimer = 0;\n  private burstCount = 0;\n\n  // Difficulty scaling\n  private static difficultyMultiplier = 1;\n\n  constructor(x: number, y: number, wave: number, forceType?: EnemyType) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(0, 0);\n    \n    // Select enemy type based on wave progression or force specific type\n    if (forceType) {\n      this.type = forceType;\n    } else {\n      this.type = this.selectEnemyType(wave);\n    }\n\n    this.initializeStats(wave);\n    this.movementPattern = Math.floor(Math.random() * 4);\n  }\n\n  private selectEnemyType(wave: number): EnemyType {\n    const rand = Math.random();\n    \n    // Early waves: mostly scouts and fighters\n    if (wave <= 3) {\n      return rand < 0.7 ? EnemyType.SCOUT : EnemyType.FIGHTER;\n    }\n    \n    // Mid waves: introduce heavy and bomber\n    if (wave <= 7) {\n      if (rand < 0.4) return EnemyType.SCOUT;\n      if (rand < 0.65) return EnemyType.FIGHTER;\n      if (rand < 0.85) return EnemyType.HEAVY;\n      return EnemyType.BOMBER;\n    }\n    \n    // Late waves: all types including advanced enemies\n    if (rand < 0.25) return EnemyType.SCOUT;\n    if (rand < 0.45) return EnemyType.FIGHTER;\n    if (rand < 0.65) return EnemyType.HEAVY;\n    if (rand < 0.8) return EnemyType.BOMBER;\n    if (rand < 0.95) return EnemyType.INTERCEPTOR;\n    return EnemyType.DESTROYER;\n  }\n\n  private initializeStats(wave: number): void {\n    const waveMultiplier = 1 + (wave - 1) * 0.1;\n    \n    switch (this.type) {\n      case EnemyType.SCOUT:\n        this.width = 30;\n        this.height = 30;\n        this.maxHp = Math.floor(25 * waveMultiplier * Enemy.difficultyMultiplier);\n        this.speed = 150 + wave * 10;\n        this.damage = Math.floor(15 * waveMultiplier);\n        this.shootCooldown = 2000;\n        this.scoreValue = 50;\n        this.coinValue = 5;\n        break;\n        \n      case EnemyType.FIGHTER:\n        this.width = 40;\n        this.height = 40;\n        this.maxHp = Math.floor(50 * waveMultiplier * Enemy.difficultyMultiplier);\n        this.speed = 100 + wave * 8;\n        this.damage = Math.floor(25 * waveMultiplier);\n        this.shootCooldown = 1500;\n        this.scoreValue = 100;\n        this.coinValue = 10;\n        break;\n        \n      case EnemyType.HEAVY:\n        this.width = 60;\n        this.height = 50;\n        this.maxHp = Math.floor(100 * waveMultiplier * Enemy.difficultyMultiplier);\n        this.speed = 60 + wave * 5;\n        this.damage = Math.floor(40 * waveMultiplier);\n        this.shootCooldown = 1000;\n        this.scoreValue = 200;\n        this.coinValue = 20;\n        break;\n\n      case EnemyType.BOMBER:\n        this.width = 50;\n        this.height = 45;\n        this.maxHp = Math.floor(75 * waveMultiplier * Enemy.difficultyMultiplier);\n        this.speed = 80 + wave * 6;\n        this.damage = Math.floor(35 * waveMultiplier);\n        this.shootCooldown = 3000; // Slower but powerful shots\n        this.scoreValue = 150;\n        this.coinValue = 15;\n        break;\n\n      case EnemyType.INTERCEPTOR:\n        this.width = 35;\n        this.height = 35;\n        this.maxHp = Math.floor(40 * waveMultiplier * Enemy.difficultyMultiplier);\n        this.speed = 200 + wave * 15;\n        this.damage = Math.floor(20 * waveMultiplier);\n        this.shootCooldown = 800; // Fast shooting\n        this.scoreValue = 120;\n        this.coinValue = 12;\n        break;\n\n      case EnemyType.DESTROYER:\n        this.width = 70;\n        this.height = 60;\n        this.maxHp = Math.floor(150 * waveMultiplier * Enemy.difficultyMultiplier);\n        this.speed = 50 + wave * 4;\n        this.damage = Math.floor(50 * waveMultiplier);\n        this.shootCooldown = 1200;\n        this.scoreValue = 300;\n        this.coinValue = 30;\n        break;\n    }\n    \n    this.hp = this.maxHp;\n  }\n\n  public update(deltaTime: number, playerPosition: Vector2, canvas: HTMLCanvasElement): void {\n    this.patternTimer += deltaTime;\n    this.specialTimer += deltaTime;\n    this.lastShot += deltaTime;\n\n    // Movement patterns based on enemy type\n    this.updateMovement(playerPosition);\n\n    // Apply movement\n    this.position.x += this.velocity.x * deltaTime / 1000;\n    this.position.y += this.velocity.y * deltaTime / 1000;\n\n    // Keep in bounds horizontally\n    this.position.x = Math.max(0, Math.min(canvas.width - this.width, this.position.x));\n  }\n\n  private updateMovement(playerPosition: Vector2): void {\n    switch (this.type) {\n      case EnemyType.SCOUT:\n        this.updateScoutMovement();\n        break;\n      case EnemyType.FIGHTER:\n        this.updateFighterMovement();\n        break;\n      case EnemyType.HEAVY:\n        this.updateHeavyMovement();\n        break;\n      case EnemyType.BOMBER:\n        this.updateBomberMovement(playerPosition);\n        break;\n      case EnemyType.INTERCEPTOR:\n        this.updateInterceptorMovement(playerPosition);\n        break;\n      case EnemyType.DESTROYER:\n        this.updateDestroyerMovement(playerPosition);\n        break;\n    }\n  }\n\n  private updateScoutMovement(): void {\n    switch (this.movementPattern) {\n      case 0: // Straight down\n        this.velocity.y = this.speed;\n        this.velocity.x = 0;\n        break;\n      case 1: // Sine wave\n        this.velocity.y = this.speed * 0.7;\n        this.velocity.x = Math.sin(this.patternTimer * 0.003) * this.speed * 0.5;\n        break;\n      case 2: // Zigzag\n        this.velocity.y = this.speed * 0.8;\n        this.velocity.x = Math.sin(this.patternTimer * 0.005) * this.speed * 0.3;\n        break;\n      case 3: // Spiral\n        this.velocity.y = this.speed * 0.6;\n        this.velocity.x = Math.cos(this.patternTimer * 0.004) * this.speed * 0.4;\n        break;\n    }\n  }\n\n  private updateFighterMovement(): void {\n    // Aggressive pursuit with evasive maneuvers\n    this.velocity.y = this.speed * 0.7;\n    this.velocity.x = Math.sin(this.patternTimer * 0.006) * this.speed * 0.6;\n  }\n\n  private updateHeavyMovement(): void {\n    // Slow but steady advance\n    this.velocity.y = this.speed;\n    this.velocity.x = Math.sin(this.patternTimer * 0.002) * this.speed * 0.2;\n  }\n\n  private updateBomberMovement(playerPosition: Vector2): void {\n    // Tries to position above player\n    const dx = playerPosition.x - this.position.x;\n    this.velocity.y = this.speed * 0.5;\n    this.velocity.x = Math.sign(dx) * this.speed * 0.3;\n  }\n\n  private updateInterceptorMovement(playerPosition: Vector2): void {\n    // Fast, erratic movement with player tracking\n    const dx = playerPosition.x - this.position.x;\n    const dy = playerPosition.y - this.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance > 0) {\n      this.velocity.x = (dx / distance) * this.speed * 0.4 + Math.sin(this.patternTimer * 0.008) * this.speed * 0.3;\n      this.velocity.y = Math.max((dy / distance) * this.speed * 0.2, this.speed * 0.6);\n    }\n  }\n\n  private updateDestroyerMovement(playerPosition: Vector2): void {\n    // Slow but relentless pursuit\n    const dx = playerPosition.x - this.position.x;\n    this.velocity.y = this.speed * 0.8;\n    this.velocity.x = Math.sign(dx) * this.speed * 0.2;\n  }\n\n  public shoot(): Projectile[] {\n    if (this.lastShot >= this.shootCooldown) {\n      this.lastShot = 0;\n      return this.createProjectiles();\n    }\n    return [];\n  }\n\n  private createProjectiles(): Projectile[] {\n    const projectiles: Projectile[] = [];\n    const centerX = this.position.x + this.width / 2;\n    const centerY = this.position.y + this.height;\n\n    switch (this.type) {\n      case EnemyType.SCOUT:\n        projectiles.push(new Projectile(\n          centerX - 2, centerY, 0, 400, this.damage, false, '#ff4444'\n        ));\n        break;\n\n      case EnemyType.FIGHTER:\n        // Dual shot\n        projectiles.push(new Projectile(\n          centerX - 8, centerY, 0, 450, this.damage, false, '#ff8800'\n        ));\n        projectiles.push(new Projectile(\n          centerX + 4, centerY, 0, 450, this.damage, false, '#ff8800'\n        ));\n        break;\n\n      case EnemyType.HEAVY:\n        // Triple shot\n        projectiles.push(new Projectile(\n          centerX - 2, centerY, 0, 350, this.damage, false, '#ff0088'\n        ));\n        projectiles.push(new Projectile(\n          centerX - 10, centerY, -50, 350, this.damage * 0.8, false, '#ff0088'\n        ));\n        projectiles.push(new Projectile(\n          centerX + 6, centerY, 50, 350, this.damage * 0.8, false, '#ff0088'\n        ));\n        break;\n\n      case EnemyType.BOMBER:\n        // Large explosive projectile\n        projectiles.push(new Projectile(\n          centerX - 4, centerY, 0, 300, this.damage * 1.5, false, '#ffaa00', 8, 16\n        ));\n        break;\n\n      case EnemyType.INTERCEPTOR:\n        // Rapid burst fire\n        if (this.burstCount < 3) {\n          projectiles.push(new Projectile(\n            centerX - 2, centerY, 0, 500, this.damage * 0.7, false, '#00ff88'\n          ));\n          this.burstCount++;\n          this.lastShot = this.shootCooldown - 200; // Quick follow-up shots\n        } else {\n          this.burstCount = 0;\n        }\n        break;\n\n      case EnemyType.DESTROYER:\n        // Spread shot\n        for (let i = -2; i <= 2; i++) {\n          projectiles.push(new Projectile(\n            centerX - 2, centerY, i * 80, 400, this.damage * 0.8, false, '#8800ff'\n          ));\n        }\n        break;\n    }\n\n    return projectiles;\n  }\n\n  public takeDamage(amount: number): void {\n    this.hp = Math.max(0, this.hp - amount);\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n\n    // Draw enemy ship based on type\n    switch (this.type) {\n      case EnemyType.SCOUT:\n        this.renderScout(ctx);\n        break;\n      case EnemyType.FIGHTER:\n        this.renderFighter(ctx);\n        break;\n      case EnemyType.HEAVY:\n        this.renderHeavy(ctx);\n        break;\n      case EnemyType.BOMBER:\n        this.renderBomber(ctx);\n        break;\n      case EnemyType.INTERCEPTOR:\n        this.renderInterceptor(ctx);\n        break;\n      case EnemyType.DESTROYER:\n        this.renderDestroyer(ctx);\n        break;\n    }\n\n    // Draw health bar\n    this.renderHealthBar(ctx);\n\n    ctx.restore();\n  }\n\n  private renderScout(ctx: CanvasRenderingContext2D): void {\n    ctx.fillStyle = '#ff4444';\n    ctx.beginPath();\n    ctx.moveTo(this.position.x + this.width / 2, this.position.y + this.height);\n    ctx.lineTo(this.position.x, this.position.y);\n    ctx.lineTo(this.position.x + this.width / 4, this.position.y + this.height * 0.3);\n    ctx.lineTo(this.position.x + this.width * 0.75, this.position.y + this.height * 0.3);\n    ctx.lineTo(this.position.x + this.width, this.position.y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  private renderFighter(ctx: CanvasRenderingContext2D): void {\n    ctx.fillStyle = '#ff8800';\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n    \n    // Wings\n    ctx.fillStyle = '#ffaa44';\n    ctx.fillRect(this.position.x - 5, this.position.y + 10, 10, 20);\n    ctx.fillRect(this.position.x + this.width - 5, this.position.y + 10, 10, 20);\n  }\n\n  private renderHeavy(ctx: CanvasRenderingContext2D): void {\n    ctx.fillStyle = '#ff0088';\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n    \n    // Armor plating\n    ctx.fillStyle = '#ff44aa';\n    ctx.fillRect(this.position.x + 5, this.position.y + 5, this.width - 10, this.height - 10);\n    \n    // Weapons\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(this.position.x + 10, this.position.y + this.height - 5, 8, 10);\n    ctx.fillRect(this.position.x + this.width - 18, this.position.y + this.height - 5, 8, 10);\n  }\n\n  private renderBomber(ctx: CanvasRenderingContext2D): void {\n    ctx.fillStyle = '#ffaa00';\n    // Main body\n    ctx.fillRect(this.position.x + 10, this.position.y, this.width - 20, this.height);\n    \n    // Wings\n    ctx.fillStyle = '#ff8800';\n    ctx.fillRect(this.position.x, this.position.y + 15, this.width, 15);\n    \n    // Bomb bay\n    ctx.fillStyle = '#ff6600';\n    ctx.fillRect(this.position.x + 15, this.position.y + this.height - 8, this.width - 30, 8);\n  }\n\n  private renderInterceptor(ctx: CanvasRenderingContext2D): void {\n    ctx.fillStyle = '#00ff88';\n    // Sleek triangular design\n    ctx.beginPath();\n    ctx.moveTo(this.position.x + this.width / 2, this.position.y);\n    ctx.lineTo(this.position.x, this.position.y + this.height);\n    ctx.lineTo(this.position.x + this.width / 3, this.position.y + this.height * 0.7);\n    ctx.lineTo(this.position.x + this.width * 0.67, this.position.y + this.height * 0.7);\n    ctx.lineTo(this.position.x + this.width, this.position.y + this.height);\n    ctx.closePath();\n    ctx.fill();\n    \n    // Engine trails\n    ctx.fillStyle = '#44ffaa';\n    ctx.fillRect(this.position.x + 8, this.position.y + this.height, 4, 8);\n    ctx.fillRect(this.position.x + this.width - 12, this.position.y + this.height, 4, 8);\n  }\n\n  private renderDestroyer(ctx: CanvasRenderingContext2D): void {\n    ctx.fillStyle = '#8800ff';\n    // Main hull\n    ctx.fillRect(this.position.x + 5, this.position.y, this.width - 10, this.height);\n    \n    // Command tower\n    ctx.fillStyle = '#aa44ff';\n    ctx.fillRect(this.position.x + 20, this.position.y - 5, this.width - 40, 15);\n    \n    // Weapon turrets\n    ctx.fillStyle = '#ffffff';\n    ctx.beginPath();\n    ctx.arc(this.position.x + 15, this.position.y + 20, 6, 0, Math.PI * 2);\n    ctx.arc(this.position.x + this.width - 15, this.position.y + 20, 6, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Side armor\n    ctx.fillStyle = '#6600cc';\n    ctx.fillRect(this.position.x, this.position.y + 10, 5, this.height - 20);\n    ctx.fillRect(this.position.x + this.width - 5, this.position.y + 10, 5, this.height - 20);\n  }\n\n  private renderHealthBar(ctx: CanvasRenderingContext2D): void {\n    if (this.hp < this.maxHp) {\n      const barWidth = this.width;\n      const barHeight = 4;\n      const barY = this.position.y - 8;\n      \n      // Background\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(this.position.x, barY, barWidth, barHeight);\n      \n      // Health\n      ctx.fillStyle = '#ff0000';\n      const healthWidth = (this.hp / this.maxHp) * barWidth;\n      ctx.fillRect(this.position.x, barY, healthWidth, barHeight);\n    }\n  }\n\n  public static increaseDifficulty(): void {\n    Enemy.difficultyMultiplier += 0.2;\n  }\n\n  public static resetDifficulty(): void {\n    Enemy.difficultyMultiplier = 1;\n  }\n}\n","import { Vector2 } from '../utils/Vector2';\nimport { Projectile } from './Projectile';\n\nexport enum BossType {\n  DREADNOUGHT = 'dreadnought',\n  MOTHERSHIP = 'mothership',\n  FORTRESS = 'fortress'\n}\n\nexport class Boss {\n  public position: Vector2;\n  public velocity: Vector2;\n  public width!: number;\n  public height!: number;\n  public hp!: number;\n  public maxHp!: number;\n  public damage!: number;\n  public scoreValue!: number;\n  public coinValue!: number;\n  public type: BossType;\n  public isDefeated: boolean = false;\n\n  private speed!: number;\n  private lastShot = 0;\n  private shootCooldown!: number;\n  private patternTimer = 0;\n  private specialTimer = 0;\n  private phase: number = 1;\n  private specialAttackTimer = 0;\n  private specialAttackCooldown = 8000; // 8 seconds\n\n  constructor(x: number, y: number, wave: number, type?: BossType) {\n    this.position = new Vector2(x, y);\n    this.velocity = new Vector2(0, 0);\n    \n    // Select boss type based on wave\n    if (type) {\n      this.type = type;\n    } else {\n      this.type = this.selectBossType(wave);\n    }\n\n    this.initializeStats(wave);\n  }\n\n  private selectBossType(wave: number): BossType {\n    if (wave <= 5) return BossType.DREADNOUGHT;\n    if (wave <= 10) return BossType.MOTHERSHIP;\n    return BossType.FORTRESS;\n  }\n\n  private initializeStats(wave: number): void {\n    const waveMultiplier = 1 + (wave - 1) * 0.15;\n    \n    switch (this.type) {\n      case BossType.DREADNOUGHT:\n        this.width = 120;\n        this.height = 80;\n        this.maxHp = Math.floor(500 * waveMultiplier);\n        this.speed = 80;\n        this.damage = Math.floor(60 * waveMultiplier);\n        this.shootCooldown = 1500;\n        this.scoreValue = 2000;\n        this.coinValue = 200;\n        break;\n        \n      case BossType.MOTHERSHIP:\n        this.width = 160;\n        this.height = 100;\n        this.maxHp = Math.floor(800 * waveMultiplier);\n        this.speed = 60;\n        this.damage = Math.floor(80 * waveMultiplier);\n        this.shootCooldown = 1200;\n        this.scoreValue = 3500;\n        this.coinValue = 350;\n        break;\n        \n      case BossType.FORTRESS:\n        this.width = 200;\n        this.height = 120;\n        this.maxHp = Math.floor(1200 * waveMultiplier);\n        this.speed = 40;\n        this.damage = Math.floor(100 * waveMultiplier);\n        this.shootCooldown = 1000;\n        this.scoreValue = 5000;\n        this.coinValue = 500;\n        break;\n    }\n    \n    this.hp = this.maxHp;\n  }\n\n  public update(deltaTime: number, playerPosition: Vector2, canvas: HTMLCanvasElement): void {\n    this.patternTimer += deltaTime;\n    this.specialTimer += deltaTime;\n    this.lastShot += deltaTime;\n    this.specialAttackTimer += deltaTime;\n\n    // Update phase based on health\n    const healthPercent = this.hp / this.maxHp;\n    if (healthPercent > 0.66) {\n      this.phase = 1;\n    } else if (healthPercent > 0.33) {\n      this.phase = 2;\n    } else {\n      this.phase = 3;\n    }\n\n    // Movement patterns\n    this.updateMovement(playerPosition);\n\n    // Apply movement\n    this.position.x += this.velocity.x * deltaTime / 1000;\n    this.position.y += this.velocity.y * deltaTime / 1000;\n\n    // Keep boss in bounds\n    this.position.x = Math.max(0, Math.min(canvas.width - this.width, this.position.x));\n    this.position.y = Math.max(-this.height * 0.3, Math.min(canvas.height * 0.4, this.position.y));\n  }\n\n  private updateMovement(playerPosition: Vector2): void {\n    switch (this.type) {\n      case BossType.DREADNOUGHT:\n        // Side-to-side movement\n        this.velocity.x = Math.sin(this.patternTimer * 0.001) * this.speed;\n        this.velocity.y = Math.sin(this.patternTimer * 0.0005) * this.speed * 0.3;\n        break;\n        \n      case BossType.MOTHERSHIP:\n        // Circular movement\n        const angle = this.patternTimer * 0.0008;\n        this.velocity.x = Math.cos(angle) * this.speed * 0.8;\n        this.velocity.y = Math.sin(angle) * this.speed * 0.4;\n        break;\n        \n      case BossType.FORTRESS:\n        // Slow, menacing advance and retreat\n        if (this.phase === 3) {\n          // Aggressive phase - move toward player\n          const dx = playerPosition.x - (this.position.x + this.width / 2);\n          this.velocity.x = Math.sign(dx) * this.speed * 0.5;\n          this.velocity.y = Math.sin(this.patternTimer * 0.0003) * this.speed * 0.2;\n        } else {\n          // Normal movement\n          this.velocity.x = Math.sin(this.patternTimer * 0.0006) * this.speed * 0.7;\n          this.velocity.y = 0;\n        }\n        break;\n    }\n  }\n\n  public shoot(): Projectile[] {\n    const projectiles: Projectile[] = [];\n    \n    // Regular shooting\n    if (this.lastShot >= this.shootCooldown) {\n      this.lastShot = 0;\n      projectiles.push(...this.createRegularProjectiles());\n    }\n    \n    // Special attacks\n    if (this.specialAttackTimer >= this.specialAttackCooldown) {\n      this.specialAttackTimer = 0;\n      projectiles.push(...this.createSpecialAttack());\n    }\n    \n    return projectiles;\n  }\n\n  private createRegularProjectiles(): Projectile[] {\n    const projectiles: Projectile[] = [];\n    const centerX = this.position.x + this.width / 2;\n    const centerY = this.position.y + this.height;\n\n    switch (this.type) {\n      case BossType.DREADNOUGHT:\n        // Quad cannon\n        for (let i = 0; i < 4; i++) {\n          const offsetX = (i - 1.5) * 20;\n          projectiles.push(new Projectile(\n            centerX + offsetX - 3, centerY, 0, 350, this.damage, false, '#ff0000', 6, 12\n          ));\n        }\n        break;\n\n      case BossType.MOTHERSHIP:\n        // Spread pattern\n        for (let i = -3; i <= 3; i++) {\n          projectiles.push(new Projectile(\n            centerX - 3, centerY, i * 60, 400, this.damage * 0.8, false, '#ff4400', 5, 10\n          ));\n        }\n        break;\n\n      case BossType.FORTRESS:\n        // Heavy barrage\n        const shots = this.phase === 3 ? 8 : 6;\n        for (let i = 0; i < shots; i++) {\n          const angle = (i / shots) * Math.PI * 2;\n          const vx = Math.sin(angle) * 200;\n          const vy = Math.cos(angle) * 300 + 200;\n          projectiles.push(new Projectile(\n            centerX - 4, centerY, vx, vy, this.damage, false, '#8800ff', 8, 16\n          ));\n        }\n        break;\n    }\n\n    return projectiles;\n  }\n\n  private createSpecialAttack(): Projectile[] {\n    const projectiles: Projectile[] = [];\n    const centerX = this.position.x + this.width / 2;\n    const centerY = this.position.y + this.height;\n\n    switch (this.type) {\n      case BossType.DREADNOUGHT:\n        // Laser beam simulation (rapid fire line)\n        for (let i = 0; i < 10; i++) {\n          projectiles.push(new Projectile(\n            centerX - 2, centerY + i * 5, 0, 600, this.damage * 1.5, false, '#ffff00', 4, 20\n          ));\n        }\n        break;\n\n      case BossType.MOTHERSHIP:\n        // Homing missiles (simulated with player-directed shots)\n        for (let i = 0; i < 5; i++) {\n          const offsetX = (i - 2) * 30;\n          projectiles.push(new Projectile(\n            centerX + offsetX - 3, centerY, 0, 250, this.damage * 1.2, false, '#ff8800', 6, 14\n          ));\n        }\n        break;\n\n      case BossType.FORTRESS:\n        // Orbital bombardment\n        for (let i = 0; i < 12; i++) {\n          const angle = (i / 12) * Math.PI * 2;\n          const vx = Math.sin(angle) * 300;\n          const vy = Math.cos(angle) * 200 + 250;\n          projectiles.push(new Projectile(\n            centerX - 5, centerY, vx, vy, this.damage * 1.3, false, '#ff00ff', 10, 20\n          ));\n        }\n        break;\n    }\n\n    return projectiles;\n  }\n\n  public takeDamage(amount: number): void {\n    this.hp = Math.max(0, this.hp - amount);\n    if (this.hp <= 0) {\n      this.isDefeated = true;\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n\n    // Add boss glow effect\n    ctx.shadowColor = this.getBossColor();\n    ctx.shadowBlur = 15;\n\n    // Draw boss based on type\n    switch (this.type) {\n      case BossType.DREADNOUGHT:\n        this.renderDreadnought(ctx);\n        break;\n      case BossType.MOTHERSHIP:\n        this.renderMothership(ctx);\n        break;\n      case BossType.FORTRESS:\n        this.renderFortress(ctx);\n        break;\n    }\n\n    // Draw health bar\n    this.renderHealthBar(ctx);\n\n    // Draw phase indicator\n    this.renderPhaseIndicator(ctx);\n\n    ctx.restore();\n  }\n\n  private renderDreadnought(ctx: CanvasRenderingContext2D): void {\n    // Main hull\n    ctx.fillStyle = '#ff0000';\n    ctx.fillRect(this.position.x + 20, this.position.y + 10, this.width - 40, this.height - 20);\n    \n    // Command bridge\n    ctx.fillStyle = '#ff4444';\n    ctx.fillRect(this.position.x + 40, this.position.y, this.width - 80, 20);\n    \n    // Weapon turrets\n    ctx.fillStyle = '#ffffff';\n    for (let i = 0; i < 4; i++) {\n      const x = this.position.x + 30 + i * 20;\n      ctx.beginPath();\n      ctx.arc(x, this.position.y + this.height - 10, 8, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    // Engine glow\n    ctx.fillStyle = '#ffaa00';\n    ctx.fillRect(this.position.x + 10, this.position.y + this.height, this.width - 20, 8);\n  }\n\n  private renderMothership(ctx: CanvasRenderingContext2D): void {\n    // Main disc\n    ctx.fillStyle = '#ff4400';\n    ctx.beginPath();\n    ctx.ellipse(\n      this.position.x + this.width / 2,\n      this.position.y + this.height / 2,\n      this.width / 2, this.height / 2, 0, 0, Math.PI * 2\n    );\n    ctx.fill();\n    \n    // Inner ring\n    ctx.fillStyle = '#ff8800';\n    ctx.beginPath();\n    ctx.ellipse(\n      this.position.x + this.width / 2,\n      this.position.y + this.height / 2,\n      this.width / 3, this.height / 3, 0, 0, Math.PI * 2\n    );\n    ctx.fill();\n    \n    // Central core\n    ctx.fillStyle = '#ffff00';\n    ctx.beginPath();\n    ctx.ellipse(\n      this.position.x + this.width / 2,\n      this.position.y + this.height / 2,\n      this.width / 6, this.height / 6, 0, 0, Math.PI * 2\n    );\n    ctx.fill();\n    \n    // Weapon ports\n    ctx.fillStyle = '#ffffff';\n    for (let i = 0; i < 8; i++) {\n      const angle = (i / 8) * Math.PI * 2;\n      const x = this.position.x + this.width / 2 + Math.cos(angle) * this.width / 3;\n      const y = this.position.y + this.height / 2 + Math.sin(angle) * this.height / 3;\n      ctx.beginPath();\n      ctx.arc(x, y, 4, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n\n  private renderFortress(ctx: CanvasRenderingContext2D): void {\n    // Main structure\n    ctx.fillStyle = '#8800ff';\n    ctx.fillRect(this.position.x, this.position.y + 20, this.width, this.height - 40);\n    \n    // Upper section\n    ctx.fillStyle = '#aa44ff';\n    ctx.fillRect(this.position.x + 20, this.position.y, this.width - 40, 40);\n    \n    // Lower section\n    ctx.fillRect(this.position.x + 20, this.position.y + this.height - 20, this.width - 40, 20);\n    \n    // Side towers\n    ctx.fillStyle = '#6600cc';\n    ctx.fillRect(this.position.x, this.position.y, 20, this.height);\n    ctx.fillRect(this.position.x + this.width - 20, this.position.y, 20, this.height);\n    \n    // Weapon arrays\n    ctx.fillStyle = '#ffffff';\n    for (let i = 0; i < 6; i++) {\n      const x = this.position.x + 30 + i * 28;\n      ctx.fillRect(x, this.position.y + this.height - 15, 8, 15);\n    }\n    \n    // Central cannon\n    ctx.fillStyle = '#ffff00';\n    ctx.fillRect(\n      this.position.x + this.width / 2 - 10,\n      this.position.y + this.height - 25,\n      20, 25\n    );\n  }\n\n  private getBossColor(): string {\n    switch (this.type) {\n      case BossType.DREADNOUGHT: return '#ff0000';\n      case BossType.MOTHERSHIP: return '#ff4400';\n      case BossType.FORTRESS: return '#8800ff';\n      default: return '#ff0000';\n    }\n  }\n\n  private renderHealthBar(ctx: CanvasRenderingContext2D): void {\n    const barWidth = this.width;\n    const barHeight = 8;\n    const barY = this.position.y - 20;\n    \n    // Background\n    ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n    ctx.fillRect(this.position.x, barY, barWidth, barHeight);\n    \n    // Health\n    ctx.fillStyle = '#ff0000';\n    const healthWidth = (this.hp / this.maxHp) * barWidth;\n    ctx.fillRect(this.position.x, barY, healthWidth, barHeight);\n    \n    // Border\n    ctx.strokeStyle = '#ffffff';\n    ctx.lineWidth = 2;\n    ctx.strokeRect(this.position.x, barY, barWidth, barHeight);\n  }\n\n  private renderPhaseIndicator(ctx: CanvasRenderingContext2D): void {\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 16px Orbitron';\n    ctx.textAlign = 'center';\n    ctx.fillText(\n      `PHASE ${this.phase}`,\n      this.position.x + this.width / 2,\n      this.position.y - 30\n    );\n  }\n}\n","import { Vector2 } from '../utils/Vector2';\n\ninterface Particle {\n  position: Vector2;\n  velocity: Vector2;\n  life: number;\n  maxLife: number;\n  color: string;\n  size: number;\n}\n\nexport class ParticleSystem {\n  private particles: Particle[] = [];\n\n  public createExplosion(x: number, y: number, color: string, count: number): void {\n    for (let i = 0; i < count; i++) {\n      const angle = (Math.PI * 2 * i) / count + Math.random() * 0.5;\n      const speed = 100 + Math.random() * 200;\n      \n      const particle: Particle = {\n        position: new Vector2(x, y),\n        velocity: new Vector2(\n          Math.cos(angle) * speed,\n          Math.sin(angle) * speed\n        ),\n        life: 1000 + Math.random() * 1000,\n        maxLife: 1000 + Math.random() * 1000,\n        color: color,\n        size: 2 + Math.random() * 4\n      };\n      \n      this.particles.push(particle);\n    }\n  }\n\n  public update(deltaTime: number): void {\n    for (let i = this.particles.length - 1; i >= 0; i--) {\n      const particle = this.particles[i];\n      \n      particle.position.x += particle.velocity.x * deltaTime / 1000;\n      particle.position.y += particle.velocity.y * deltaTime / 1000;\n      particle.life -= deltaTime;\n      \n      // Apply gravity and friction\n      particle.velocity.y += 50 * deltaTime / 1000;\n      particle.velocity.x *= 0.99;\n      particle.velocity.y *= 0.99;\n      \n      if (particle.life <= 0) {\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    \n    for (const particle of this.particles) {\n      const alpha = particle.life / particle.maxLife;\n      ctx.globalAlpha = alpha;\n      ctx.fillStyle = particle.color;\n      \n      ctx.beginPath();\n      ctx.arc(\n        particle.position.x,\n        particle.position.y,\n        particle.size * alpha,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n    }\n    \n    ctx.restore();\n  }\n}\n","export class InputManager {\n  private keys: Set<string> = new Set();\n  private mousePos = { x: 0, y: 0 };\n  private touchPos: { x: number; y: number } | null = null;\n  private isTouching = false;\n  private canvas: HTMLCanvasElement;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    // Keyboard events\n    document.addEventListener('keydown', (e) => {\n      this.keys.add(e.code);\n      e.preventDefault();\n    });\n\n    document.addEventListener('keyup', (e) => {\n      this.keys.delete(e.code);\n      e.preventDefault();\n    });\n\n    // Mouse events\n    this.canvas.addEventListener('mousemove', (e) => {\n      const rect = this.canvas.getBoundingClientRect();\n      this.mousePos.x = e.clientX - rect.left;\n      this.mousePos.y = e.clientY - rect.top;\n    });\n\n    // Touch events\n    this.canvas.addEventListener('touchstart', (e) => {\n      e.preventDefault();\n      this.isTouching = true;\n      this.updateTouchPosition(e);\n    });\n\n    this.canvas.addEventListener('touchmove', (e) => {\n      e.preventDefault();\n      if (this.isTouching) {\n        this.updateTouchPosition(e);\n      }\n    });\n\n    this.canvas.addEventListener('touchend', (e) => {\n      e.preventDefault();\n      this.isTouching = false;\n      this.touchPos = null;\n    });\n\n    // Prevent context menu on right click\n    this.canvas.addEventListener('contextmenu', (e) => {\n      e.preventDefault();\n    });\n  }\n\n  private updateTouchPosition(e: TouchEvent): void {\n    if (e.touches.length > 0) {\n      const rect = this.canvas.getBoundingClientRect();\n      this.touchPos = {\n        x: e.touches[0].clientX - rect.left,\n        y: e.touches[0].clientY - rect.top\n      };\n    }\n  }\n\n  public update(): void {\n    // Input state is updated by event listeners\n  }\n\n  public isMovingLeft(): boolean {\n    return this.keys.has('KeyA') || this.keys.has('ArrowLeft');\n  }\n\n  public isMovingRight(): boolean {\n    return this.keys.has('KeyD') || this.keys.has('ArrowRight');\n  }\n\n  public isMovingUp(): boolean {\n    return this.keys.has('KeyW') || this.keys.has('ArrowUp');\n  }\n\n  public isMovingDown(): boolean {\n    return this.keys.has('KeyS') || this.keys.has('ArrowDown');\n  }\n\n  public isShooting(): boolean {\n    return this.keys.has('Space');\n  }\n\n  public getTouchInput(): { x: number; y: number } | null {\n    return this.touchPos;\n  }\n\n  public isMobile(): boolean {\n    return this.isTouching;\n  }\n}\n","import { UpgradeType, PlayerUpgrades, LeaderboardEntry } from '../types/GameTypes';\n\nexport class UIManager {\n  private elements: { [key: string]: HTMLElement | null } = {};\n  private callbacks: { [key: string]: Function } = {};\n\n  constructor() {\n    this.initializeElements();\n    this.setupEventListeners();\n  }\n\n  private initializeElements(): void {\n    // Get all UI elements with null checks\n    this.elements.hud = document.getElementById('hud');\n    this.elements.menuOverlay = document.getElementById('menu-overlay');\n    this.elements.shopOverlay = document.getElementById('shop-overlay');\n    this.elements.leaderboardOverlay = document.getElementById('leaderboard-overlay');\n    this.elements.controlsOverlay = document.getElementById('controls-overlay');\n    this.elements.gameOverOverlay = document.getElementById('game-over-overlay');\n    this.elements.pauseOverlay = document.getElementById('pause-overlay');\n    \n    // HUD elements\n    this.elements.hpFill = document.getElementById('hp-fill');\n    this.elements.hpText = document.getElementById('hp-text');\n    this.elements.shieldFill = document.getElementById('shield-fill');\n    this.elements.shieldText = document.getElementById('shield-text');\n    this.elements.scoreText = document.getElementById('score-text');\n    this.elements.waveText = document.getElementById('wave-text');\n    this.elements.coinsText = document.getElementById('coins-text');\n    \n    // Shop elements\n    this.elements.weaponCost = document.getElementById('weapon-cost');\n    this.elements.weaponLevel = document.getElementById('weapon-level');\n    this.elements.shieldCost = document.getElementById('shield-cost');\n    this.elements.shieldLevel = document.getElementById('shield-level');\n    this.elements.hpCost = document.getElementById('hp-cost');\n    this.elements.hpLevel = document.getElementById('hp-level');\n    this.elements.speedCost = document.getElementById('speed-cost');\n    this.elements.speedLevel = document.getElementById('speed-level');\n    \n    // Game over elements\n    this.elements.finalScore = document.getElementById('final-score');\n    this.elements.finalWave = document.getElementById('final-wave');\n    this.elements.finalCoins = document.getElementById('final-coins');\n    this.elements.playerName = document.getElementById('player-name');\n    \n    // Leaderboard\n    this.elements.leaderboardList = document.getElementById('leaderboard-list');\n\n    // Log missing elements for debugging\n    Object.keys(this.elements).forEach(key => {\n      if (!this.elements[key]) {\n        console.warn(`UI element not found: ${key}`);\n      }\n    });\n  }\n\n  private setupEventListeners(): void {\n    // Main menu buttons\n    document.getElementById('start-btn')?.addEventListener('click', () => {\n      this.callbacks.startGame?.();\n    });\n    \n    document.getElementById('shop-btn')?.addEventListener('click', () => {\n      this.callbacks.pauseAndShowShop?.();\n    });\n    \n    document.getElementById('leaderboard-btn')?.addEventListener('click', () => {\n      this.callbacks.showLeaderboard?.();\n    });\n    \n    document.getElementById('controls-btn')?.addEventListener('click', () => {\n      this.callbacks.showControls?.();\n    });\n\n    // Shop buttons\n    document.getElementById('shop-close-btn')?.addEventListener('click', () => {\n      this.callbacks.resumeFromShop?.();\n    });\n\n    document.querySelectorAll('.shop-buy-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        const upgradeType = target.getAttribute('data-upgrade') as UpgradeType;\n        this.callbacks.purchaseUpgrade?.(upgradeType);\n      });\n    });\n\n    // Leaderboard buttons\n    document.getElementById('leaderboard-close-btn')?.addEventListener('click', () => {\n      this.callbacks.resumeFromLeaderboard?.();\n    });\n\n    // Controls buttons\n    document.getElementById('controls-close-btn')?.addEventListener('click', () => {\n      this.callbacks.resumeFromControls?.();\n    });\n\n    // Game over buttons\n    document.getElementById('submit-score-btn')?.addEventListener('click', () => {\n      const nameInput = this.elements.playerName as HTMLInputElement;\n      const name = nameInput?.value?.trim() || 'Anonymous';\n      this.callbacks.submitScore?.(name);\n    });\n\n    document.getElementById('restart-btn')?.addEventListener('click', () => {\n      this.callbacks.restartGame?.();\n    });\n\n    document.getElementById('main-menu-btn')?.addEventListener('click', () => {\n      this.callbacks.mainMenu?.();\n    });\n\n    // Pause buttons\n    document.getElementById('resume-btn')?.addEventListener('click', () => {\n      this.callbacks.resumeGame?.();\n    });\n\n    document.getElementById('pause-shop-btn')?.addEventListener('click', () => {\n      this.callbacks.showShop?.();\n    });\n\n    document.getElementById('pause-menu-btn')?.addEventListener('click', () => {\n      this.callbacks.mainMenu?.();\n    });\n\n    // Mobile controls\n    document.getElementById('mobile-menu-btn')?.addEventListener('click', () => {\n      this.callbacks.pauseAndShowShop?.();\n    });\n\n    document.getElementById('mobile-pause-btn')?.addEventListener('click', () => {\n      this.callbacks.pauseGame?.();\n    });\n\n    // Enter key for name input\n    this.elements.playerName?.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        const nameInput = this.elements.playerName as HTMLInputElement;\n        const name = nameInput?.value?.trim() || 'Anonymous';\n        this.callbacks.submitScore?.(name);\n      }\n    });\n  }\n\n  // Callback setters\n  public onStartGame(callback: Function): void {\n    this.callbacks.startGame = callback;\n  }\n\n  public onShowShop(callback: Function): void {\n    this.callbacks.showShop = callback;\n  }\n\n  public onPauseAndShowShop(callback: Function): void {\n    this.callbacks.pauseAndShowShop = callback;\n  }\n\n  public onResumeFromShop(callback: Function): void {\n    this.callbacks.resumeFromShop = callback;\n  }\n\n  public onResumeFromLeaderboard(callback: Function): void {\n    this.callbacks.resumeFromLeaderboard = callback;\n  }\n\n  public onResumeFromControls(callback: Function): void {\n    this.callbacks.resumeFromControls = callback;\n  }\n\n  public onShowLeaderboard(callback: Function): void {\n    this.callbacks.showLeaderboard = callback;\n  }\n\n  public onShowControls(callback: Function): void {\n    this.callbacks.showControls = callback;\n  }\n\n  public onPauseGame(callback: Function): void {\n    this.callbacks.pauseGame = callback;\n  }\n\n  public onResumeGame(callback: Function): void {\n    this.callbacks.resumeGame = callback;\n  }\n\n  public onRestartGame(callback: Function): void {\n    this.callbacks.restartGame = callback;\n  }\n\n  public onMainMenu(callback: Function): void {\n    this.callbacks.mainMenu = callback;\n  }\n\n  public onSubmitScore(callback: Function): void {\n    this.callbacks.submitScore = callback;\n  }\n\n  public onPurchaseUpgrade(callback: Function): void {\n    this.callbacks.purchaseUpgrade = callback;\n  }\n\n  // UI update methods with null checks\n  public updateHP(current: number, max: number): void {\n    const hpFill = this.elements.hpFill;\n    const hpText = this.elements.hpText;\n    if (hpFill && hpText) {\n      const percentage = (current / max) * 100;\n      (hpFill as HTMLElement).style.width = `${percentage}%`;\n      hpText.textContent = `${Math.ceil(current)}/${max}`;\n    }\n  }\n\n  public updateShield(current: number, max: number): void {\n    const shieldFill = this.elements.shieldFill;\n    const shieldText = this.elements.shieldText;\n    if (shieldFill && shieldText) {\n      const percentage = (current / max) * 100;\n      (shieldFill as HTMLElement).style.width = `${percentage}%`;\n      shieldText.textContent = `${Math.ceil(current)}/${max}`;\n    }\n  }\n\n  public updateScore(score: number): void {\n    const scoreText = this.elements.scoreText;\n    if (scoreText) {\n      scoreText.textContent = score.toLocaleString();\n    }\n  }\n\n  public updateWave(wave: number): void {\n    const waveText = this.elements.waveText;\n    if (waveText) {\n      waveText.textContent = `${wave}`;\n    }\n  }\n\n  public updateCoins(coins: number): void {\n    const coinsText = this.elements.coinsText;\n    if (coinsText) {\n      coinsText.textContent = coins.toLocaleString();\n    }\n  }\n\n  public updateUpgradeDisplay(upgrades: PlayerUpgrades): void {\n    // Update levels with null checks\n    const weaponLevel = this.elements.weaponLevel;\n    if (weaponLevel) {\n      weaponLevel.textContent = upgrades.weapon.toString();\n    }\n    \n    const shieldLevel = this.elements.shieldLevel;\n    if (shieldLevel) {\n      shieldLevel.textContent = upgrades.shield.toString();\n    }\n    \n    const hpLevel = this.elements.hpLevel;\n    if (hpLevel) {\n      hpLevel.textContent = upgrades.hp.toString();\n    }\n    \n    const speedLevel = this.elements.speedLevel;\n    if (speedLevel) {\n      speedLevel.textContent = upgrades.speed.toString();\n    }\n\n    // Update costs with null checks\n    const baseCosts = { weapon: 100, shield: 150, hp: 200, speed: 120 };\n    \n    Object.keys(baseCosts).forEach(type => {\n      const cost = Math.floor(baseCosts[type as UpgradeType] * Math.pow(1.5, upgrades[type as UpgradeType] - 1));\n      const costElement = this.elements[`${type}Cost`];\n      if (costElement) {\n        costElement.textContent = cost.toString();\n      }\n    });\n  }\n\n  // Screen management\n  public showMainMenu(): void {\n    this.hideAllOverlays();\n    const menuOverlay = this.elements.menuOverlay;\n    if (menuOverlay) {\n      menuOverlay.classList.remove('hidden');\n    }\n  }\n\n  public showGame(): void {\n    this.hideAllOverlays();\n  }\n\n  public showShop(): void {\n    this.hideAllOverlays();\n    const shopOverlay = this.elements.shopOverlay;\n    if (shopOverlay) {\n      shopOverlay.classList.remove('hidden');\n    }\n  }\n\n  public showLeaderboard(scores: LeaderboardEntry[]): void {\n    this.hideAllOverlays();\n    const leaderboardOverlay = this.elements.leaderboardOverlay;\n    if (leaderboardOverlay) {\n      leaderboardOverlay.classList.remove('hidden');\n    }\n    this.populateLeaderboard(scores);\n  }\n\n  public showControls(): void {\n    this.hideAllOverlays();\n    const controlsOverlay = this.elements.controlsOverlay;\n    if (controlsOverlay) {\n      controlsOverlay.classList.remove('hidden');\n    }\n  }\n\n  public showGameOver(score: number, wave: number, coins: number): void {\n    this.hideAllOverlays();\n    const gameOverOverlay = this.elements.gameOverOverlay;\n    if (gameOverOverlay) {\n      gameOverOverlay.classList.remove('hidden');\n    }\n    \n    const finalScore = this.elements.finalScore;\n    if (finalScore) {\n      finalScore.textContent = score.toLocaleString();\n    }\n    \n    const finalWave = this.elements.finalWave;\n    if (finalWave) {\n      finalWave.textContent = wave.toString();\n    }\n    \n    const finalCoins = this.elements.finalCoins;\n    if (finalCoins) {\n      finalCoins.textContent = coins.toLocaleString();\n    }\n    \n    const playerName = this.elements.playerName;\n    if (playerName) {\n      const nameInput = playerName as HTMLInputElement;\n      nameInput.value = '';\n      nameInput.focus();\n    }\n  }\n\n  public showPause(): void {\n    this.hideAllOverlays();\n    const pauseOverlay = this.elements.pauseOverlay;\n    if (pauseOverlay) {\n      pauseOverlay.classList.remove('hidden');\n    }\n  }\n\n  private hideAllOverlays(): void {\n    document.querySelectorAll('.menu-overlay').forEach(overlay => {\n      overlay.classList.add('hidden');\n    });\n  }\n\n  private populateLeaderboard(scores: LeaderboardEntry[]): void {\n    const leaderboardList = this.elements.leaderboardList;\n    if (!leaderboardList) return;\n    \n    leaderboardList.innerHTML = '';\n    \n    if (scores.length === 0) {\n      leaderboardList.innerHTML = '<p style=\"text-align: center; color: #666;\">No scores yet!</p>';\n      return;\n    }\n\n    scores.forEach((entry, index) => {\n      const entryElement = document.createElement('div');\n      entryElement.className = `leaderboard-entry ${index < 3 ? 'top-3' : ''}`;\n      \n      entryElement.innerHTML = `\n        <span class=\"leaderboard-rank\">#${index + 1}</span>\n        <span class=\"leaderboard-name\">${entry.name}</span>\n        <span class=\"leaderboard-score\">${entry.score.toLocaleString()}</span>\n      `;\n      \n      leaderboardList.appendChild(entryElement);\n    });\n  }\n}\n","import { PlayerUpgrades, LeaderboardEntry } from '../types/GameTypes';\n\ninterface SaveData {\n  coins: number;\n  upgrades: PlayerUpgrades;\n}\n\nexport class StorageManager {\n  private readonly SAVE_KEY = 'spaceBattleSave';\n  private readonly LEADERBOARD_KEY = 'spaceBattleLeaderboard';\n\n  public saveGameData(data: SaveData): void {\n    try {\n      localStorage.setItem(this.SAVE_KEY, JSON.stringify(data));\n    } catch (error) {\n      console.warn('Failed to save game data:', error);\n    }\n  }\n\n  public loadGameData(): SaveData {\n    try {\n      const saved = localStorage.getItem(this.SAVE_KEY);\n      if (saved) {\n        return JSON.parse(saved);\n      }\n    } catch (error) {\n      console.warn('Failed to load game data:', error);\n    }\n\n    // Return default data\n    return {\n      coins: 0,\n      upgrades: {\n        weapon: 1,\n        shield: 1,\n        hp: 1,\n        speed: 1\n      }\n    };\n  }\n\n  public addScore(name: string, score: number, wave: number): void {\n    try {\n      const scores = this.getLeaderboard();\n      scores.push({\n        name: name.substring(0, 20), // Limit name length\n        score,\n        wave,\n        date: new Date().toISOString()\n      });\n\n      // Sort by score (descending) and keep top 10\n      scores.sort((a, b) => b.score - a.score);\n      const topScores = scores.slice(0, 10);\n\n      localStorage.setItem(this.LEADERBOARD_KEY, JSON.stringify(topScores));\n    } catch (error) {\n      console.warn('Failed to save score:', error);\n    }\n  }\n\n  public getLeaderboard(): LeaderboardEntry[] {\n    try {\n      const saved = localStorage.getItem(this.LEADERBOARD_KEY);\n      if (saved) {\n        return JSON.parse(saved);\n      }\n    } catch (error) {\n      console.warn('Failed to load leaderboard:', error);\n    }\n\n    return [];\n  }\n\n  public clearAllData(): void {\n    try {\n      localStorage.removeItem(this.SAVE_KEY);\n      localStorage.removeItem(this.LEADERBOARD_KEY);\n    } catch (error) {\n      console.warn('Failed to clear data:', error);\n    }\n  }\n}\n","export class SoundManager {\n  private audioContext: AudioContext | null = null;\n  private enabled = true;\n\n  constructor() {\n    this.initializeAudio();\n  }\n\n  private initializeAudio(): void {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    } catch (error) {\n      console.warn('Web Audio API not supported:', error);\n      this.enabled = false;\n    }\n  }\n\n  public playShoot(): void {\n    if (!this.enabled || !this.audioContext) return;\n\n    const oscillator = this.audioContext.createOscillator();\n    const gainNode = this.audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.audioContext.destination);\n\n    oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime);\n    oscillator.frequency.exponentialRampToValueAtTime(400, this.audioContext.currentTime + 0.1);\n\n    gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.1);\n\n    oscillator.start(this.audioContext.currentTime);\n    oscillator.stop(this.audioContext.currentTime + 0.1);\n  }\n\n  public playExplosion(): void {\n    if (!this.enabled || !this.audioContext) return;\n\n    const oscillator = this.audioContext.createOscillator();\n    const gainNode = this.audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.audioContext.destination);\n\n    oscillator.frequency.setValueAtTime(200, this.audioContext.currentTime);\n    oscillator.frequency.exponentialRampToValueAtTime(50, this.audioContext.currentTime + 0.3);\n\n    gainNode.gain.setValueAtTime(0.2, this.audioContext.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.3);\n\n    oscillator.start(this.audioContext.currentTime);\n    oscillator.stop(this.audioContext.currentTime + 0.3);\n  }\n\n  public playPowerUp(): void {\n    if (!this.enabled || !this.audioContext) return;\n\n    const oscillator = this.audioContext.createOscillator();\n    const gainNode = this.audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.audioContext.destination);\n\n    oscillator.frequency.setValueAtTime(400, this.audioContext.currentTime);\n    oscillator.frequency.exponentialRampToValueAtTime(800, this.audioContext.currentTime + 0.2);\n\n    gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.2);\n\n    oscillator.start(this.audioContext.currentTime);\n    oscillator.stop(this.audioContext.currentTime + 0.2);\n  }\n\n  public setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n  }\n}\n","export enum GameState {\n  MENU = 'menu',\n  PLAYING = 'playing',\n  PAUSED = 'paused',\n  GAME_OVER = 'gameOver',\n  SHOP = 'shop',\n  LEADERBOARD = 'leaderboard',\n  CONTROLS = 'controls'\n}\n\nexport interface GameStats {\n  score: number;\n  wave: number;\n  coins: number;\n  enemiesKilled: number;\n  gameTime: number;\n}\n\nexport type UpgradeType = 'weapon' | 'shield' | 'hp' | 'speed';\n\nexport interface PlayerUpgrades {\n  weapon: number;\n  shield: number;\n  hp: number;\n  speed: number;\n}\n\nexport interface LeaderboardEntry {\n  name: string;\n  score: number;\n  wave: number;\n  date: string;\n}\n","import { Player } from './entities/Player';\nimport { Enemy } from './entities/Enemy';\nimport { Boss } from './entities/Boss';\nimport { Projectile } from './entities/Projectile';\nimport { PowerUp } from './entities/PowerUp';\nimport { ParticleSystem } from './effects/ParticleSystem';\nimport { InputManager } from './managers/InputManager';\nimport { UIManager } from './managers/UIManager';\nimport { StorageManager } from './managers/StorageManager';\nimport { SoundManager } from './managers/SoundManager';\nimport { GameState, GameStats, UpgradeType } from './types/GameTypes';\n\nexport class Game {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private gameState: GameState = GameState.MENU;\n  private previousGameState: GameState = GameState.MENU;\n  private lastTime = 0;\n\n  // Game entities\n  private player: Player;\n  private enemies: Enemy[] = [];\n  private boss: Boss | null = null;\n  private projectiles: Projectile[] = [];\n  private powerUps: PowerUp[] = [];\n  private particles: ParticleSystem;\n\n  // Managers\n  private inputManager: InputManager;\n  private uiManager: UIManager;\n  private storageManager: StorageManager;\n  private soundManager: SoundManager;\n\n  // Game stats\n  private stats: GameStats = {\n    score: 0,\n    wave: 1,\n    coins: 0,\n    enemiesKilled: 0,\n    gameTime: 0\n  };\n\n  // Wave management\n  private waveTimer = 0;\n  private waveDelay = 3000; // 3 seconds between waves\n  private enemiesInWave = 5;\n  private enemiesSpawned = 0;\n  private waveComplete = false;\n  private isBossWave = false;\n\n  // Power-up spawn\n  private powerUpTimer = 0;\n  private powerUpSpawnRate = 15000; // 15 seconds\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d')!;\n    \n    this.resizeCanvas();\n    window.addEventListener('resize', () => this.resizeCanvas());\n\n    // Initialize managers\n    this.inputManager = new InputManager(canvas);\n    this.uiManager = new UIManager();\n    this.storageManager = new StorageManager();\n    this.soundManager = new SoundManager();\n\n    // Initialize game objects\n    this.player = new Player(canvas.width / 2, canvas.height - 100);\n    this.particles = new ParticleSystem();\n\n    // Load saved data\n    this.loadGameData();\n\n    // Setup event listeners\n    this.setupEventListeners();\n  }\n\n  private resizeCanvas(): void {\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n    \n    if (this.player) {\n      // Keep player in bounds after resize\n      this.player.position.x = Math.min(this.player.position.x, this.canvas.width - this.player.width);\n      this.player.position.y = Math.min(this.player.position.y, this.canvas.height - this.player.height);\n    }\n  }\n\n  private setupEventListeners(): void {\n    // Menu navigation\n    this.uiManager.onStartGame(() => this.startNewGame());\n    this.uiManager.onPauseAndShowShop(() => this.pauseAndShowShop());\n    this.uiManager.onShowShop(() => this.showShop());\n    this.uiManager.onResumeFromShop(() => this.resumeFromShop());\n    this.uiManager.onShowLeaderboard(() => this.showLeaderboard());\n    this.uiManager.onResumeFromLeaderboard(() => this.resumeFromLeaderboard());\n    this.uiManager.onShowControls(() => this.showControls());\n    this.uiManager.onResumeFromControls(() => this.resumeFromControls());\n    this.uiManager.onPauseGame(() => this.pauseGame());\n    this.uiManager.onResumeGame(() => this.resumeGame());\n    this.uiManager.onRestartGame(() => this.startNewGame());\n    this.uiManager.onMainMenu(() => this.showMainMenu());\n    this.uiManager.onSubmitScore((name: string) => this.submitScore(name));\n\n    // Shop\n    this.uiManager.onPurchaseUpgrade((type: UpgradeType) => this.purchaseUpgrade(type));\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (e) => {\n      if (e.code === 'Escape') {\n        if (this.gameState === GameState.PLAYING) {\n          this.pauseGame();\n        } else if (this.gameState === GameState.PAUSED) {\n          this.resumeGame();\n        } else if (this.gameState === GameState.SHOP && this.previousGameState === GameState.PLAYING) {\n          this.resumeFromShop();\n        } else if (this.gameState === GameState.LEADERBOARD && this.previousGameState === GameState.PLAYING) {\n          this.resumeFromLeaderboard();\n        } else if (this.gameState === GameState.CONTROLS && this.previousGameState === GameState.PLAYING) {\n          this.resumeFromControls();\n        }\n      } else if (e.code === 'KeyP' && this.gameState === GameState.PLAYING) {\n        this.pauseGame();\n      }\n    });\n  }\n\n  private loadGameData(): void {\n    const savedData = this.storageManager.loadGameData();\n    this.stats.coins = savedData.coins;\n    this.player.applyUpgrades(savedData.upgrades);\n    this.uiManager.updateUpgradeDisplay(savedData.upgrades);\n    this.uiManager.updateCoins(this.stats.coins);\n  }\n\n  private saveGameData(): void {\n    this.storageManager.saveGameData({\n      coins: this.stats.coins,\n      upgrades: this.player.getUpgrades()\n    });\n  }\n\n  public start(): void {\n    this.gameLoop(0);\n  }\n\n  private gameLoop(currentTime: number): void {\n    const deltaTime = currentTime - this.lastTime;\n    this.lastTime = currentTime;\n\n    this.update(deltaTime);\n    this.render();\n\n    requestAnimationFrame((time) => this.gameLoop(time));\n  }\n\n  private update(deltaTime: number): void {\n    if (this.gameState !== GameState.PLAYING) return;\n\n    this.stats.gameTime += deltaTime;\n\n    // Update input\n    this.inputManager.update();\n\n    // Update player\n    this.player.update(deltaTime, this.inputManager, this.canvas);\n\n    // Handle player shooting\n    if (this.inputManager.isShooting() || this.inputManager.isMobile()) {\n      const projectile = this.player.shoot();\n      if (projectile) {\n        this.projectiles.push(projectile);\n        this.soundManager.playShoot();\n      }\n    }\n\n    // Update projectiles\n    this.updateProjectiles(deltaTime);\n\n    // Update enemies\n    this.updateEnemies(deltaTime);\n\n    // Update boss\n    this.updateBoss(deltaTime);\n\n    // Update power-ups\n    this.updatePowerUps(deltaTime);\n\n    // Update particles\n    this.particles.update(deltaTime);\n\n    // Check collisions\n    this.checkCollisions();\n\n    // Wave management\n    this.updateWaveLogic(deltaTime);\n\n    // Spawn power-ups\n    this.updatePowerUpSpawning(deltaTime);\n\n    // Update UI\n    this.updateUI();\n\n    // Check game over\n    if (this.player.hp <= 0) {\n      this.gameOver();\n    }\n  }\n\n  private updateProjectiles(deltaTime: number): void {\n    for (let i = this.projectiles.length - 1; i >= 0; i--) {\n      const projectile = this.projectiles[i];\n      projectile.update(deltaTime);\n\n      // Remove projectiles that are off-screen\n      if (projectile.position.y < -50 || \n          projectile.position.y > this.canvas.height + 50 ||\n          projectile.position.x < -50 || \n          projectile.position.x > this.canvas.width + 50) {\n        this.projectiles.splice(i, 1);\n      }\n    }\n  }\n\n  private updateEnemies(deltaTime: number): void {\n    for (let i = this.enemies.length - 1; i >= 0; i--) {\n      const enemy = this.enemies[i];\n      enemy.update(deltaTime, this.player.position, this.canvas);\n\n      // Enemy shooting\n      const enemyProjectiles = enemy.shoot();\n      if (enemyProjectiles.length > 0) {\n        this.projectiles.push(...enemyProjectiles);\n      }\n\n      // Remove enemies that are off-screen (only if moving away)\n      if (enemy.position.y > this.canvas.height + 100) {\n        this.enemies.splice(i, 1);\n      }\n    }\n  }\n\n  private updateBoss(deltaTime: number): void {\n    if (!this.boss) return;\n\n    this.boss.update(deltaTime, this.player.position, this.canvas);\n\n    // Boss shooting\n    const bossProjectiles = this.boss.shoot();\n    if (bossProjectiles.length > 0) {\n      this.projectiles.push(...bossProjectiles);\n    }\n\n    // Check if boss is defeated\n    if (this.boss.isDefeated) {\n      this.stats.enemiesKilled++;\n      this.stats.score += this.boss.scoreValue;\n      this.stats.coins += this.boss.coinValue;\n\n      // Create massive explosion\n      this.particles.createExplosion(\n        this.boss.position.x + this.boss.width / 2,\n        this.boss.position.y + this.boss.height / 2,\n        '#ffaa00', 30\n      );\n      this.soundManager.playExplosion();\n\n      // Spawn multiple power-ups\n      for (let i = 0; i < 3; i++) {\n        this.spawnPowerUp(\n          this.boss.position.x + Math.random() * this.boss.width,\n          this.boss.position.y + Math.random() * this.boss.height\n        );\n      }\n\n      this.boss = null;\n      this.isBossWave = false;\n      this.waveComplete = true;\n      this.waveTimer = 0;\n    }\n  }\n\n  private updatePowerUps(deltaTime: number): void {\n    for (let i = this.powerUps.length - 1; i >= 0; i--) {\n      const powerUp = this.powerUps[i];\n      powerUp.update(deltaTime);\n\n      // Remove power-ups that are off-screen or expired\n      if (powerUp.position.y > this.canvas.height + 50 || powerUp.isExpired()) {\n        this.powerUps.splice(i, 1);\n      }\n    }\n  }\n\n  private checkCollisions(): void {\n    // Player projectiles vs enemies\n    for (let i = this.projectiles.length - 1; i >= 0; i--) {\n      const projectile = this.projectiles[i];\n      if (!projectile.isPlayerProjectile) continue;\n\n      // Check enemy collisions\n      for (let j = this.enemies.length - 1; j >= 0; j--) {\n        const enemy = this.enemies[j];\n        if (this.checkCollision(projectile, enemy)) {\n          enemy.takeDamage(projectile.damage);\n          this.projectiles.splice(i, 1);\n\n          this.particles.createExplosion(enemy.position.x, enemy.position.y, '#ff4444', 5);\n\n          if (enemy.hp <= 0) {\n            this.enemies.splice(j, 1);\n            this.stats.enemiesKilled++;\n            this.stats.score += enemy.scoreValue;\n            this.stats.coins += enemy.coinValue;\n\n            this.particles.createExplosion(enemy.position.x, enemy.position.y, '#ffaa00', 15);\n            this.soundManager.playExplosion();\n\n            if (Math.random() < 0.15) {\n              this.spawnPowerUp(enemy.position.x, enemy.position.y);\n            }\n          }\n          break;\n        }\n      }\n\n      // Check boss collision\n      if (this.boss && this.checkCollision(projectile, this.boss)) {\n        this.boss.takeDamage(projectile.damage);\n        this.projectiles.splice(i, 1);\n\n        this.particles.createExplosion(\n          projectile.position.x, projectile.position.y, '#ff4444', 8\n        );\n      }\n    }\n\n    // Enemy projectiles vs player\n    for (let i = this.projectiles.length - 1; i >= 0; i--) {\n      const projectile = this.projectiles[i];\n      if (projectile.isPlayerProjectile) continue;\n\n      if (this.checkCollision(projectile, this.player)) {\n        this.player.takeDamage(projectile.damage);\n        this.projectiles.splice(i, 1);\n\n        this.particles.createExplosion(this.player.position.x, this.player.position.y, '#4444ff', 8);\n      }\n    }\n\n    // Enemies vs player\n    for (let i = this.enemies.length - 1; i >= 0; i--) {\n      const enemy = this.enemies[i];\n      if (this.checkCollision(enemy, this.player)) {\n        this.player.takeDamage(enemy.damage);\n        enemy.takeDamage(this.player.ramDamage);\n\n        this.particles.createExplosion(\n          (enemy.position.x + this.player.position.x) / 2,\n          (enemy.position.y + this.player.position.y) / 2,\n          '#ffffff', 10\n        );\n\n        if (enemy.hp <= 0) {\n          this.enemies.splice(i, 1);\n          this.stats.enemiesKilled++;\n          this.stats.score += enemy.scoreValue;\n          this.stats.coins += enemy.coinValue;\n          this.soundManager.playExplosion();\n        }\n      }\n    }\n\n    // Boss vs player\n    if (this.boss && this.checkCollision(this.boss, this.player)) {\n      this.player.takeDamage(this.boss.damage);\n      \n      this.particles.createExplosion(\n        this.player.position.x, this.player.position.y, '#ffffff', 15\n      );\n    }\n\n    // Player vs power-ups\n    for (let i = this.powerUps.length - 1; i >= 0; i--) {\n      const powerUp = this.powerUps[i];\n      if (this.checkCollision(powerUp, this.player)) {\n        this.player.applyPowerUp(powerUp);\n        this.powerUps.splice(i, 1);\n\n        this.particles.createExplosion(powerUp.position.x, powerUp.position.y, powerUp.color, 8);\n        this.soundManager.playPowerUp();\n      }\n    }\n  }\n\n  private checkCollision(obj1: any, obj2: any): boolean {\n    return obj1.position.x < obj2.position.x + obj2.width &&\n           obj1.position.x + obj1.width > obj2.position.x &&\n           obj1.position.y < obj2.position.y + obj2.height &&\n           obj1.position.y + obj1.height > obj2.position.y;\n  }\n\n  private updateWaveLogic(deltaTime: number): void {\n    // Check if wave is complete\n    const waveEntitiesCleared = this.enemies.length === 0 && \n                               (!this.isBossWave || !this.boss) && \n                               this.enemiesSpawned >= this.enemiesInWave;\n\n    if (waveEntitiesCleared) {\n      if (!this.waveComplete) {\n        this.waveComplete = true;\n        this.waveTimer = 0;\n        \n        // Wave completion bonus\n        this.stats.score += this.stats.wave * 100;\n        this.stats.coins += this.stats.wave * 10;\n      }\n\n      this.waveTimer += deltaTime;\n      if (this.waveTimer >= this.waveDelay) {\n        this.startNextWave();\n      }\n    } else if (!this.isBossWave && this.enemiesSpawned < this.enemiesInWave) {\n      // Spawn regular enemies gradually\n      if (this.enemies.length < 3) {\n        this.spawnEnemy();\n        this.enemiesSpawned++;\n      }\n    }\n  }\n\n  private startNextWave(): void {\n    this.stats.wave++;\n    this.waveComplete = false;\n    this.waveTimer = 0;\n\n    // Check if this should be a boss wave\n    this.isBossWave = this.stats.wave % 5 === 0;\n\n    if (this.isBossWave) {\n      this.spawnBoss();\n      this.enemiesInWave = 0;\n      this.enemiesSpawned = 0;\n    } else {\n      this.enemiesInWave = Math.min(5 + Math.floor(this.stats.wave / 2), 15);\n      this.enemiesSpawned = 0;\n    }\n\n    // Increase difficulty every 5 waves\n    if (this.stats.wave % 5 === 0) {\n      Enemy.increaseDifficulty();\n    }\n  }\n\n  private spawnEnemy(): void {\n    const x = Math.random() * (this.canvas.width - 60);\n    const y = -60;\n    const enemy = new Enemy(x, y, this.stats.wave);\n    this.enemies.push(enemy);\n  }\n\n  private spawnBoss(): void {\n    const x = this.canvas.width / 2 - 100; // Center the boss\n    const y = -120;\n    this.boss = new Boss(x, y, this.stats.wave);\n  }\n\n  private updatePowerUpSpawning(deltaTime: number): void {\n    this.powerUpTimer += deltaTime;\n    if (this.powerUpTimer >= this.powerUpSpawnRate) {\n      this.powerUpTimer = 0;\n      const x = Math.random() * (this.canvas.width - 40);\n      const y = -40;\n      this.spawnPowerUp(x, y);\n    }\n  }\n\n  private spawnPowerUp(x: number, y: number): void {\n    const powerUp = new PowerUp(x, y);\n    this.powerUps.push(powerUp);\n  }\n\n  private updateUI(): void {\n    this.uiManager.updateHP(this.player.hp, this.player.maxHp);\n    this.uiManager.updateShield(this.player.shield, this.player.maxShield);\n    this.uiManager.updateScore(this.stats.score);\n    this.uiManager.updateWave(this.stats.wave);\n    this.uiManager.updateCoins(this.stats.coins);\n  }\n\n  private render(): void {\n    // Clear canvas with gradient background\n    const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);\n    gradient.addColorStop(0, '#000428');\n    gradient.addColorStop(1, '#004e92');\n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw stars\n    this.drawStars();\n\n    if (this.gameState === GameState.PLAYING || this.gameState === GameState.PAUSED) {\n      // Draw game entities\n      this.player.render(this.ctx);\n      \n      this.enemies.forEach(enemy => enemy.render(this.ctx));\n      if (this.boss) {\n        this.boss.render(this.ctx);\n      }\n      this.projectiles.forEach(projectile => projectile.render(this.ctx));\n      this.powerUps.forEach(powerUp => powerUp.render(this.ctx));\n      \n      // Draw particles\n      this.particles.render(this.ctx);\n\n      // Draw wave transition text\n      if (this.waveComplete && this.waveTimer < 2000) {\n        this.drawWaveTransition();\n      }\n\n      // Draw boss warning\n      if (this.isBossWave && this.boss && this.waveTimer < 3000) {\n        this.drawBossWarning();\n      }\n    }\n  }\n\n  private drawStars(): void {\n    this.ctx.fillStyle = '#ffffff';\n    for (let i = 0; i < 100; i++) {\n      const x = (i * 137.5) % this.canvas.width;\n      const y = (i * 73.3) % this.canvas.height;\n      const size = Math.sin(i + this.stats.gameTime * 0.001) * 0.5 + 1;\n      this.ctx.globalAlpha = Math.sin(i + this.stats.gameTime * 0.002) * 0.3 + 0.7;\n      this.ctx.fillRect(x, y, size, size);\n    }\n    this.ctx.globalAlpha = 1;\n  }\n\n  private drawWaveTransition(): void {\n    this.ctx.save();\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.ctx.fillStyle = '#ffff00';\n    this.ctx.font = 'bold 48px Orbitron';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    \n    const text = this.isBossWave ? `BOSS WAVE ${this.stats.wave}!` : `WAVE ${this.stats.wave} COMPLETE!`;\n    this.ctx.fillText(text, this.canvas.width / 2, this.canvas.height / 2 - 30);\n    \n    this.ctx.font = 'bold 24px Orbitron';\n    this.ctx.fillStyle = '#00ffff';\n    const nextText = `Next wave in ${Math.ceil((this.waveDelay - this.waveTimer) / 1000)}...`;\n    this.ctx.fillText(nextText, this.canvas.width / 2, this.canvas.height / 2 + 30);\n    \n    this.ctx.restore();\n  }\n\n  private drawBossWarning(): void {\n    this.ctx.save();\n    this.ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.ctx.fillStyle = '#ff0000';\n    this.ctx.font = 'bold 64px Orbitron';\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    \n    const alpha = Math.sin(this.stats.gameTime * 0.01) * 0.5 + 0.5;\n    this.ctx.globalAlpha = alpha;\n    \n    this.ctx.fillText('WARNING', this.canvas.width / 2, this.canvas.height / 2 - 50);\n    \n    this.ctx.font = 'bold 32px Orbitron';\n    this.ctx.fillStyle = '#ffff00';\n    this.ctx.fillText('BOSS APPROACHING', this.canvas.width / 2, this.canvas.height / 2 + 20);\n    \n    this.ctx.restore();\n  }\n\n  // Game state methods (keeping existing methods unchanged)\n  private startNewGame(): void {\n    this.gameState = GameState.PLAYING;\n    this.previousGameState = GameState.MENU;\n    this.stats = {\n      score: 0,\n      wave: 1,\n      coins: this.stats.coins,\n      enemiesKilled: 0,\n      gameTime: 0\n    };\n\n    this.player.reset(this.canvas.width / 2, this.canvas.height - 100);\n    this.enemies = [];\n    this.boss = null;\n    this.projectiles = [];\n    this.powerUps = [];\n    this.particles = new ParticleSystem();\n\n    this.enemiesInWave = 5;\n    this.enemiesSpawned = 0;\n    this.waveComplete = false;\n    this.isBossWave = false;\n    this.waveTimer = 0;\n    this.powerUpTimer = 0;\n\n    Enemy.resetDifficulty();\n    this.uiManager.showGame();\n  }\n\n  private pauseGame(): void {\n    if (this.gameState === GameState.PLAYING) {\n      this.previousGameState = this.gameState;\n      this.gameState = GameState.PAUSED;\n      this.uiManager.showPause();\n    }\n  }\n\n  private resumeGame(): void {\n    if (this.gameState === GameState.PAUSED) {\n      this.gameState = GameState.PLAYING;\n      this.uiManager.showGame();\n    }\n  }\n\n  private pauseAndShowShop(): void {\n    if (this.gameState === GameState.PLAYING) {\n      this.previousGameState = this.gameState;\n      this.gameState = GameState.SHOP;\n      this.uiManager.showShop();\n    } else if (this.gameState === GameState.MENU) {\n      this.showShop();\n    }\n  }\n\n  private showShop(): void {\n    this.uiManager.showShop();\n  }\n\n  private resumeFromShop(): void {\n    if (this.previousGameState === GameState.PLAYING) {\n      this.gameState = GameState.PLAYING;\n      this.uiManager.showGame();\n    } else {\n      this.showMainMenu();\n    }\n  }\n\n  private showLeaderboard(): void {\n    if (this.gameState === GameState.PLAYING) {\n      this.previousGameState = this.gameState;\n      this.gameState = GameState.LEADERBOARD;\n    }\n    const scores = this.storageManager.getLeaderboard();\n    this.uiManager.showLeaderboard(scores);\n  }\n\n  private resumeFromLeaderboard(): void {\n    if (this.previousGameState === GameState.PLAYING) {\n      this.gameState = GameState.PLAYING;\n      this.uiManager.showGame();\n    } else {\n      this.showMainMenu();\n    }\n  }\n\n  private showControls(): void {\n    if (this.gameState === GameState.PLAYING) {\n      this.previousGameState = this.gameState;\n      this.gameState = GameState.CONTROLS;\n    }\n    this.uiManager.showControls();\n  }\n\n  private resumeFromControls(): void {\n    if (this.previousGameState === GameState.PLAYING) {\n      this.gameState = GameState.PLAYING;\n      this.uiManager.showGame();\n    } else {\n      this.showMainMenu();\n    }\n  }\n\n  private gameOver(): void {\n    this.gameState = GameState.GAME_OVER;\n    this.previousGameState = GameState.GAME_OVER;\n    this.saveGameData();\n    this.uiManager.showGameOver(this.stats.score, this.stats.wave - 1, this.stats.coins);\n  }\n\n  private showMainMenu(): void {\n    this.gameState = GameState.MENU;\n    this.previousGameState = GameState.MENU;\n    this.uiManager.showMainMenu();\n  }\n\n  private submitScore(playerName: string): void {\n    this.storageManager.addScore(playerName, this.stats.score, this.stats.wave - 1);\n    this.showLeaderboard();\n  }\n\n  private purchaseUpgrade(type: UpgradeType): boolean {\n    const cost = this.player.getUpgradeCost(type);\n    if (this.stats.coins >= cost) {\n      this.stats.coins -= cost;\n      this.player.upgrade(type);\n      this.saveGameData();\n      this.uiManager.updateCoins(this.stats.coins);\n      this.uiManager.updateUpgradeDisplay(this.player.getUpgrades());\n      return true;\n    }\n    return false;\n  }\n}\n","import './style.css';\nimport { Game } from './game/Game';\n\n// Ensure DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;\n  if (!canvas) {\n    console.error('Canvas element not found!');\n    return;\n  }\n\n  // Initialize and start the game\n  const game = new Game(canvas);\n  game.start();\n\n  // Add version info for debugging deployment\n  console.log('Space Battle Game v2.0 - Enemy Variety & Boss Battles Loaded');\n  console.log('Build timestamp:', new Date().toISOString());\n});\n"],"names":["Vector2","x","y","__publicField","other","scalar","mag","dx","dy","Projectile","vx","vy","damage","isPlayerProjectile","color","width","height","deltaTime","ctx","PowerUpType","PowerUp","types","pulse","alpha","centerX","centerY","size","Player","input","canvas","touchInput","targetX","targetY","distance","currentSpeed","speed","type","timeLeft","newTime","amount","shieldDamage","powerUp","upgrades","_Enemy","wave","forceType","rand","waveMultiplier","playerPosition","projectiles","i","barWidth","barHeight","barY","healthWidth","Enemy","Boss","healthPercent","angle","offsetX","shots","ParticleSystem","count","particle","InputManager","e","rect","UIManager","key","_a","_b","_c","_d","_e","btn","upgradeType","_f","_g","_h","nameInput","name","_i","_j","_k","_l","_m","_n","_o","_p","callback","current","max","hpFill","hpText","percentage","shieldFill","shieldText","score","scoreText","waveText","coins","coinsText","weaponLevel","shieldLevel","hpLevel","speedLevel","baseCosts","cost","costElement","menuOverlay","shopOverlay","scores","leaderboardOverlay","controlsOverlay","gameOverOverlay","finalScore","finalWave","finalCoins","playerName","pauseOverlay","overlay","leaderboardList","entry","index","entryElement","StorageManager","data","error","saved","b","topScores","SoundManager","oscillator","gainNode","enabled","GameState","Game","savedData","currentTime","time","projectile","enemy","enemyProjectiles","bossProjectiles","j","obj1","obj2","gradient","text","nextText"],"mappings":"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"}